{"version":3,"file":"popup.js","mappingsnYA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://youtube-sort-by-likes/./src/js/api.js","webpack://youtube-sort-by-likes/./src/js/constants.js","webpack://youtube-sort-by-likes/./src/js/utils.js","webpack://youtube-sort-by-likes/webpack/bootstrap","webpack://youtube-sort-by-likes/webpack/runtime/define property getters","webpack://youtube-sort-by-likes/webpack/runtime/hasOwnProperty shorthand","webpack://youtube-sort-by-likes/webpack/runtime/make namespace object","webpack://youtube-sort-by-likes/./src/js/popup.js"],"sourcesContent":["import { API_KEY, MAX_RESULTS, USE_MOCK_DATA } from './constants.js';\r\nimport { getCachedData, cacheData } from './utils.js';\r\n\r\nasync function getVideos(channelId, use_mock_data = USE_MOCK_DATA) {\r\n  if (use_mock_data) {\r\n    console.log(\"Using mock data\");\r\n    // Got this data just by looking in the console of popup.js\r\n    return Promise.resolve(\r\n      [\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"ukxqMOjfiRpRN-zOW-wQTH1OH2c\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"tw7XBKhZJh4\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2015-08-12T03:45:21Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"Waking Up with Sam Harris - Mindfulness Meditation (9 minutes)\",\r\n            \"description\": \"This is a 9-minute mindfulness meditation, led by Sam Harris. In 2018, Sam created the Waking Up app to be the resource he ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/tw7XBKhZJh4/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/tw7XBKhZJh4/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/tw7XBKhZJh4/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2015-08-12T03:45:21Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"DZdFBkoLDGuCv4-DoX8l-2omxeY\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"vmgxtcbc4iU\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2020-06-13T07:43:39Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"Can We Pull Back From The Brink? (Episode #207)\",\r\n            \"description\": \"In this episode of the podcast, Sam Harris speaks about the recent social protests and civil unrest, in light of what we know about ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/vmgxtcbc4iU/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/vmgxtcbc4iU/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/vmgxtcbc4iU/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2020-06-13T07:43:39Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"U9dn0ynt3Yuxxv46KMZCRFanoH0\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"CN-_zzHpcdM\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2015-08-12T03:44:45Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"Waking Up with Sam Harris - Looking for the Self (26 Minute Meditation)\",\r\n            \"description\": \"This is a 26-minute mindfulness meditation, led by Sam Harris. To learn more, visit https://wakingup.com/ Connect with us: ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/CN-_zzHpcdM/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/CN-_zzHpcdM/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/CN-_zzHpcdM/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2015-08-12T03:44:45Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"dH6rWK-Gt2pQHzG7jSbgcIxGQP4\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"yKGddvmU0fA\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2020-03-22T19:26:40Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"Sam&#39;s Mushroom Trip\",\r\n            \"description\": \"In this video Sam describes his most recent mushroom trip. (Hopefully this gives you a little break from all the Covid-19 news and ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/yKGddvmU0fA/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/yKGddvmU0fA/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/yKGddvmU0fA/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2020-03-22T19:26:40Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"v_2uUvcqiTz-_8XvSxRsFus1wtM\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"m0-oC_49fq4\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2018-09-01T17:51:24Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"Sam Harris &amp; Jordan Peterson in Vancouver 2018 (with Bret Weinstein moderating) — Second Night\",\r\n            \"description\": \"Sam Harris & Jordan Peterson - Vancouver - Second Night Moderated by Bret Weinstein 06/24/2018 This is the second time Sam ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/m0-oC_49fq4/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/m0-oC_49fq4/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/m0-oC_49fq4/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2018-09-01T17:51:24Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"u-63QilRzk7EFSWDbT2ilaOGNJU\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"VBVg5l1Cn6U\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2021-06-10T22:18:54Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"Are We Alone in the Universe?: A Conversation with Neil deGrasse Tyson (Episode #252)\",\r\n            \"description\": \"In this episode of the podcast, Sam Harris speaks with Neil deGrasse Tyson about our place in the universe. They discuss our ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/VBVg5l1Cn6U/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/VBVg5l1Cn6U/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/VBVg5l1Cn6U/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2021-06-10T22:18:54Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"6zoorZ6cqDfYWarNr1cAx_p-i0I\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"vod4aOOucaY\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2021-12-14T21:11:19Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"What Have We Learned from the Pandemic?: A Conversation with Nicholas Christakis\",\r\n            \"description\": \"In this episode, Sam Harris speaks with Nicholas Christakis about the lessons of the COVID pandemic. They discuss our failures ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/vod4aOOucaY/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/vod4aOOucaY/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/vod4aOOucaY/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2021-12-14T21:11:19Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"mHj-1yy6sjbF26E1dzpDFEYZNfU\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"c-pTYLhitds\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2021-01-11T21:26:58Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"An Insurrection of Lies (Episode #230)\",\r\n            \"description\": \"In this episode of the podcast, Sam Harris discusses two dangerous misconceptions about the siege of the Capitol. Released: ...\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/c-pTYLhitds/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/c-pTYLhitds/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/c-pTYLhitds/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2021-01-11T21:26:58Z\"\r\n          }\r\n        },\r\n        {\r\n          \"kind\": \"youtube#searchResult\",\r\n          \"etag\": \"NrvrMCKaFc3dr-oYW_rP0V9sONE\",\r\n          \"id\": {\r\n            \"kind\": \"youtube#video\",\r\n            \"videoId\": \"MPHUu9sAGKo\"\r\n          },\r\n          \"snippet\": {\r\n            \"publishedAt\": \"2020-09-18T02:13:11Z\",\r\n            \"channelId\": \"UCNAxrHudMfdzNi6NxruKPLw\",\r\n            \"title\": \"The New Religion Of Anti-Racism: A Conversation with John McWhorter (Episode #217)\",\r\n            \"description\": \"In this episode of the podcast, Sam Harris speaks with John McWhorter about race, racism, and “anti-racism” in America.\",\r\n            \"thumbnails\": {\r\n              \"default\": {\r\n                \"url\": \"https://i.ytimg.com/vi/MPHUu9sAGKo/default.jpg\",\r\n                \"width\": 120,\r\n                \"height\": 90\r\n              },\r\n              \"medium\": {\r\n                \"url\": \"https://i.ytimg.com/vi/MPHUu9sAGKo/mqdefault.jpg\",\r\n                \"width\": 320,\r\n                \"height\": 180\r\n              },\r\n              \"high\": {\r\n                \"url\": \"https://i.ytimg.com/vi/MPHUu9sAGKo/hqdefault.jpg\",\r\n                \"width\": 480,\r\n                \"height\": 360\r\n              }\r\n            },\r\n            \"channelTitle\": \"Sam Harris\",\r\n            \"liveBroadcastContent\": \"none\",\r\n            \"publishTime\": \"2020-09-18T02:13:11Z\"\r\n          }\r\n        }\r\n      ]\r\n    );\r\n  }\r\n\r\n  // Try to get the videos from the cache\r\n  const cachedVideos = await getCachedData(channelId);\r\n  console.log(\"Cached videos: \", cachedVideos); // Add this line\r\n  if (cachedVideos) {\r\n    return cachedVideos;\r\n  }\r\n\r\n  const response = await fetch(\r\n    `https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&channelId=${channelId}&part=snippet,id&order=viewCount&maxResults=${MAX_RESULTS}`\r\n  );\r\n  const data = await response.json();\r\n  console.log(\"Request successful\");\r\n  const videos = data.items.filter((item) => item.id.kind === \"youtube#video\");\r\n  \r\n  // Cache the videos for future use\r\n  await cacheData(channelId, videos);\r\n\r\n  return videos;\r\n}\r\n\r\n\r\nfunction getVideoStats(videoId, use_mock_data = USE_MOCK_DATA) {\r\n  if (use_mock_data) {\r\n    return Promise.resolve(generateMockStats(videoId));\r\n  }\r\n  return fetch(\r\n    `https://www.googleapis.com/youtube/v3/videos?key=${API_KEY}&id=${videoId}&part=statistics`\r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => data.items[0].statistics);\r\n}\r\n\r\nfunction generateMockStats(videoId) {\r\n  // Here we use videoId length to generate different stats. \r\n  // This is arbitrary and you can replace this with a logic that suits your needs\r\n  const multiplier = videoId.length;\r\n\r\n  return {\r\n    \"viewCount\": `${10000 * multiplier}`,\r\n    \"likeCount\": `${5000 * multiplier}`,\r\n    \"favoriteCount\": \"0\",\r\n    \"commentCount\": `${1000 * multiplier}`,\r\n  };\r\n}\r\n\r\n\r\nfunction getChannelIdByUsername(username, use_mock_data = USE_MOCK_DATA) {\r\n\r\n  if (use_mock_data) {\r\n    return Promise.resolve(\"samharrisorg\");\r\n  }\r\n\r\n  console.log(\"username: \", username);\r\n\r\n  return fetch(\r\n    `https://www.googleapis.com/youtube/v3/channels?key=${API_KEY}&forUsername=${username}&part=id`\r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(\"data: \", data);\r\n      if (data.items.length > 0) {\r\n        return data.items[0].id;\r\n      } else {\r\n        throw new Error('No channel found with this username');\r\n      }\r\n    });\r\n}\r\n\r\nexport { getVideos, getVideoStats, getChannelIdByUsername };\r\n","// replace with your own YouTube API key\r\nconst API_KEY = \"AIzaSyCH3y1_3XlxueC-ecNYfTcHOlTxtOiwL1o\"; \r\nconst MAX_RESULTS = 25;\r\nconst USE_MOCK_DATA = false;\r\nexport { API_KEY, MAX_RESULTS, USE_MOCK_DATA };\r\n","import { getChannelIdByUsername } from './api.js';\r\n\r\nfunction getChannelId(url) {\r\n  if (url.hostname === 'www.youtube.com' && url.pathname.startsWith('/channel/')) {\r\n    return Promise.resolve(url.pathname.split('/channel/')[1]);\r\n  } else if (url.hostname === 'www.youtube.com' && url.pathname.startsWith('/@')) {\r\n    let username = url.pathname.split('/@')[1].split('/videos')[0];\r\n    return getChannelIdByUsername(username);\r\n  } else {\r\n    throw new Error('URL is not a YouTube channel URL');\r\n  }\r\n}\r\n\r\nfunction decodeHtml(html) {\r\n  var txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n}\r\n\r\nfunction cacheData(key, data) {\r\n  console.log(\"Caching data for key: \", key);\r\n  return new Promise((resolve, reject) => {\r\n    chrome.storage.local.set({ [key]: data }, () => {\r\n      if (chrome.runtime.lastError) {\r\n        reject(chrome.runtime.lastError);\r\n      } else {\r\n        console.log(\"Data cached for key: \", key);\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction getCachedData(key) {\r\n  console.log(\"Getting cached data for key: \", key);\r\n  return new Promise((resolve, reject) => {\r\n    chrome.storage.local.get(key, (result) => {\r\n      if (chrome.runtime.lastError) {\r\n        reject(chrome.runtime.lastError);\r\n      } else {\r\n        console.log(\"Cached data for key: \", key, result);\r\n        resolve(result[key]);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport { getChannelId, decodeHtml, cacheData, getCachedData};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { getVideos, getVideoStats } from './api.js';\r\nimport { getChannelId } from './utils.js';\r\nimport { decodeHtml } from './utils.js';\r\n\r\n// Updates the popup with the most liked video and video with the highest like/view ratio\r\nasync function updatePopup(videos) {\r\n  console.log(\"Updating popup\");\r\n  let mostLikedVideos = Array(3).fill({ likes: 0, title: \"\", id: \"\" });\r\n  let highestRatioVideos = Array(3).fill({ ratio: 0, title: \"\", id: \"\" });\r\n\r\n  for (let video of videos) {\r\n    let stats = await getVideoStats(video.id.videoId);\r\n    let views = parseInt(stats.viewCount);\r\n    let likes = parseInt(stats.likeCount);\r\n    let id = video.id.videoId;\r\n    let ratio = likes / views;\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      if (likes > mostLikedVideos[i].likes) {\r\n        mostLikedVideos.splice(i, 0, { likes, title: video.snippet.title, id: id });\r\n        mostLikedVideos.pop();\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      if (ratio > highestRatioVideos[i].ratio) {\r\n        highestRatioVideos.splice(i, 0, { ratio, title: video.snippet.title, id: id });\r\n        highestRatioVideos.pop();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let mostLikedList = document.getElementById(\"mostLikedList\");\r\n  let highestRatioList = document.getElementById(\"highestRatioList\");\r\n\r\n  // Clear the lists \r\n  mostLikedList.innerHTML = '';\r\n  highestRatioList.innerHTML = '';\r\n\r\n  await new Promise(resolve => setTimeout(resolve, 200));  // Temp pause to ensure its working \r\n\r\n  let baseVideoURL = \"https://www.youtube.com/watch?v=\";\r\n  for (let i = 0; i < 3; i++) {\r\n    let mostLikedItem = document.createElement('li');\r\n    mostLikedItem.innerHTML = `<a href=\"${baseVideoURL}${mostLikedVideos[i].id}\" target=\"_blank\">${decodeHtml(mostLikedVideos[i].title)}</a>`;\r\n    mostLikedList.appendChild(mostLikedItem);\r\n\r\n    let highestRatioItem = document.createElement('li');\r\n    highestRatioItem.innerHTML = `<a href=\"${baseVideoURL}${highestRatioVideos[i].id}\" target=\"_blank\">${decodeHtml(highestRatioVideos[i].title)}</a>`;\r\n    highestRatioList.appendChild(highestRatioItem);\r\n  }\r\n}\r\n\r\nasync function refreshData() {\r\n\r\n  // Get the current tab's URL\r\n  const tabs = await new Promise(resolve =>\r\n    chrome.tabs.query({ active: true, currentWindow: true }, resolve)\r\n  );\r\n  const url = new URL(tabs[0].url);\r\n\r\n  // Get the channelId\r\n  const channelId = await getChannelId(url);\r\n\r\n  // Clear the cache for this channel\r\n  await new Promise((resolve, reject) => {\r\n    chrome.storage.local.remove(channelId, () => {\r\n      if (chrome.runtime.lastError) {\r\n        reject(chrome.runtime.lastError);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n\r\n  // Fetch new data and update the popup\r\n  const videos = await getVideos(channelId);\r\n  updatePopup(videos);\r\n}\r\n\r\nchrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n  var url = new URL(tabs[0].url);\r\n  getChannelId(url)\r\n    .then(channelId => getVideos(channelId))\r\n    .then(updatePopup)\r\n    .catch(console.error);\r\n});\r\n\r\ndocument.getElementById('refreshButton').addEventListener('click', refreshData);\r\n"],"names":[],"sourceRoot":""}